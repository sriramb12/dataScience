install.packages("factoextra")
str(attr)
attr <- colnames(cereals_data)
rm(list = ls(all=TRUE))
# Use the setwd() function to get to the directory where the data is present
cereals_data <- read.csv('Cereals.csv', header = T)
str(cereals_data)
summary(cereals_data)
#See the head and tail of the dataframe
head(cereals_data)
tail(cereals_data)
str(attr)
c(c(1,2,3), 4)
c(c(1,2,3), 4, 5)
rm(list = ls(all=TRUE))
# Use the setwd() function to get to the directory where the data is present
cereals_data <- read.csv('Cereals.csv', header = T)
str(cereals_data)
summary(cereals_data)
#See the head and tail of the dataframe
head(cereals_data)
tail(cereals_data)
#Store all column names in variable called 'attr'
attr <- colnames(cereals_data)
str(attr)
#Store all categorical attributes in 'cat_Attr'
cat_attr <- "shelf"
#Now, how to find the numerical attributes?
num_attr <- setdiff(attr, c(cat_attr, "name"))
num_attr
cereals_data$shelf <- as.factor(as.character(cereals_data$shelf))
#Now see the structure of the dataframe
str(cereals_data)
rownames(cereals_data) <- cereals_data$name
d <- c(6,2,1)
as.factor(d)
d <- c(6,2,1,0)
as.factor(d)
d <- c(6,2,1,0,0,9)
as.factor(d)
rm(list = ls(all=TRUE))
# Use the setwd() function to get to the directory where the data is present
cereals_data <- read.csv('Cereals.csv', header = T)
str(cereals_data)
summary(cereals_data)
#See the head and tail of the dataframe
head(cereals_data)
tail(cereals_data)
#Store all column names in variable called 'attr'
attr <- colnames(cereals_data)
str(attr)
#Store all categorical attributes in 'cat_Attr'
cat_attr <- "shelf"
#Now, how to find the numerical attributes?
num_attr <- setdiff(attr, c(cat_attr, "name"))
num_attr
cereals_data$shelf <- as.factor(as.character(cereals_data$shelf))
#Now see the structure of the dataframe
str(cereals_data)
rownames(cereals_data) <- cereals_data$name
#cereals_data <- cereals_data[, -c(colnames(cereals_data) %in% ("name"))]
# (or)
cereals_data$name <- NULL
sum(is.na(cereals_data))
rm(list = ls(all=TRUE))
# Use the setwd() function to get to the directory where the data is present
cereals_data <- read.csv('Cereals.csv', header = T)
str(cereals_data)
summary(cereals_data)
#See the head and tail of the dataframe
head(cereals_data)
tail(cereals_data)
#Store all column names in variable called 'attr'
attr <- colnames(cereals_data)
str(attr)
#Store all categorical attributes in 'cat_Attr'
cat_attr <- "shelf"
#Now, how to find the numerical attributes?
num_attr <- setdiff(attr, c(cat_attr, "name"))
num_attr
cereals_data$shelf <- as.factor(as.character(cereals_data$shelf))
#Now see the structure of the dataframe
str(cereals_data)
rownames(cereals_data) <- cereals_data$name
#cereals_data <- cereals_data[, -c(colnames(cereals_data) %in% ("name"))]
# (or)
cereals_data$name <- NULL
sum(is.na(cereals_data))
library(DMwR)
sum(is.na(cereals_data$shelf))
cereals_data[,num_attr] <- knnImputation(cereals_data[,num_attr], k = 3, scale = T)
sum(is.na(cereals_data))
head(cereals_data)
#How do you find missing values per column?
colSums(is.na(cereals_data))
#Make a copy of the dataframe for later use (mixed attributes)
cereals_data_copy <- cereals_data
library(dummies)
shelfDummies <- data.frame(dummy(cereals_data$shelf))
#Name the new attributes appropriately
names(shelfDummies) <- c("Shelf1","Shelf2","Shelf3")
head(shelfDummies)
cereals_data$shelf <- NULL
cereals_data <- data.frame(cbind(cereals_data, shelfDummies))
#check the dataframe using head()
head(cereals_data)
class(points_hc)
rm(list = ls(all=TRUE))
# Use the setwd() function to get to the directory where the data is present
cereals_data <- read.csv('Cereals.csv', header = T)
str(cereals_data)
summary(cereals_data)
#See the head and tail of the dataframe
head(cereals_data)
tail(cereals_data)
#Store all column names in variable called 'attr'
attr <- colnames(cereals_data)
str(attr)
#Store all categorical attributes in 'cat_Attr'
cat_attr <- "shelf"
#Now, how to find the numerical attributes?
num_attr <- setdiff(attr, c(cat_attr, "name"))
num_attr
cereals_data$shelf <- as.factor(as.character(cereals_data$shelf))
#Now see the structure of the dataframe
str(cereals_data)
rownames(cereals_data) <- cereals_data$name
#cereals_data <- cereals_data[, -c(colnames(cereals_data) %in% ("name"))]
# (or)
cereals_data$name <- NULL
sum(is.na(cereals_data))
library(DMwR)
sum(is.na(cereals_data$shelf))
cereals_data[,num_attr] <- knnImputation(cereals_data[,num_attr], k = 3, scale = T)
sum(is.na(cereals_data))
head(cereals_data)
#How do you find missing values per column?
colSums(is.na(cereals_data))
#Make a copy of the dataframe for later use (mixed attributes)
cereals_data_copy <- cereals_data
library(dummies)
shelfDummies <- data.frame(dummy(cereals_data$shelf))
#Name the new attributes appropriately
names(shelfDummies) <- c("Shelf1","Shelf2","Shelf3")
head(shelfDummies)
cereals_data$shelf <- NULL
cereals_data <- data.frame(cbind(cereals_data, shelfDummies))
#check the dataframe using head()
head(cereals_data)
cereals_data[, num_attr] <- scale(cereals_data[,num_attr], center = T, scale = T)
#install.packages("factoextra")
# if(!require(devtools)) install.packages("devtools")
# devtools::install_github("kassambara/factoextra")
library(factoextra)
# Use the get_dist() function from the factoexrtra to calculate inter-observation distances
distance <- get_dist(cereals_data)
# The fviz_dist() function plots a visual representation of the inter-observation distances
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# The gradient argument, helps us define the color range for the distance scale
# We use the euclidean distance measure (all attributes are numerical now)
distM <- dist(cereals_data, method = "euclidean")
hc_fit <- hclust(distM, method = "ward.D2")
#ward.D2 method - find the pair of clusters that leads to minimum increase in total within-cluster variance after merging
plot(hc_fit)
#Plot clusters being surrounded by a border, using the rect.hclust() function
rect.hclust(hc_fit, k = 6, border = "red")
as.factor(d)
help("kmeans")
head(cereals_clusts_km)
rm(list = ls(all=TRUE))
# Use the setwd() function to get to the directory where the data is present
cereals_data <- read.csv('Cereals.csv', header = T)
str(cereals_data)
summary(cereals_data)
#See the head and tail of the dataframe
head(cereals_data)
tail(cereals_data)
#Store all column names in variable called 'attr'
attr <- colnames(cereals_data)
str(attr)
#Store all categorical attributes in 'cat_Attr'
cat_attr <- "shelf"
#Now, how to find the numerical attributes?
num_attr <- setdiff(attr, c(cat_attr, "name"))
num_attr
cereals_data$shelf <- as.factor(as.character(cereals_data$shelf))
#Now see the structure of the dataframe
str(cereals_data)
rownames(cereals_data) <- cereals_data$name
#cereals_data <- cereals_data[, -c(colnames(cereals_data) %in% ("name"))]
# (or)
cereals_data$name <- NULL
sum(is.na(cereals_data))
library(DMwR)
sum(is.na(cereals_data$shelf))
cereals_data[,num_attr] <- knnImputation(cereals_data[,num_attr], k = 3, scale = T)
sum(is.na(cereals_data))
head(cereals_data)
#How do you find missing values per column?
colSums(is.na(cereals_data))
#Make a copy of the dataframe for later use (mixed attributes)
cereals_data_copy <- cereals_data
library(dummies)
shelfDummies <- data.frame(dummy(cereals_data$shelf))
#Name the new attributes appropriately
names(shelfDummies) <- c("Shelf1","Shelf2","Shelf3")
head(shelfDummies)
cereals_data$shelf <- NULL
cereals_data <- data.frame(cbind(cereals_data, shelfDummies))
#check the dataframe using head()
head(cereals_data)
cereals_data[, num_attr] <- scale(cereals_data[,num_attr], center = T, scale = T)
#install.packages("factoextra")
# if(!require(devtools)) install.packages("devtools")
# devtools::install_github("kassambara/factoextra")
library(factoextra)
# Use the get_dist() function from the factoexrtra to calculate inter-observation distances
distance <- get_dist(cereals_data)
# The fviz_dist() function plots a visual representation of the inter-observation distances
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# The gradient argument, helps us define the color range for the distance scale
# We use the euclidean distance measure (all attributes are numerical now)
distM <- dist(cereals_data, method = "euclidean")
hc_fit <- hclust(distM, method = "ward.D2")
#ward.D2 method - find the pair of clusters that leads to minimum increase in total within-cluster variance after merging
plot(hc_fit)
#Plot clusters being surrounded by a border, using the rect.hclust() function
rect.hclust(hc_fit, k = 6, border = "red")
points_hc <- cutree(hc_fit, k = 6)
# Store the clusters in a data frame along with the cereals data
cereals_clusts_hc <- cbind(points_hc, cereals_data)
# Have a look at the head of the new data frame
colnames(cereals_clusts_hc)[1] <- "cluster_hc"
head(cereals_clusts_hc)
#Scaling the numeric attributes
cereals_data_copy[,num_attr] <- scale(cereals_data_copy[,num_attr],scale=T,center=T)
#Calculating gower distance
library(cluster)
gower_dist = daisy(cereals_data_copy,metric = "gower")
head(gower_dist)
class(gower_dist)
#Now that you have the distance matrix, do the hclust()
hc_fit_mixed <- hclust(gower_dist, method = "ward.D2")
help("kmeans")
plot(hc_fit_mixed )
points_hc_mixed <- cutree(hc_fit_mixed , k = 6)
# Store the clusters in a data frame along with the cereals data
cereals_clusts_hc_mixed <- cbind(points_hc_mixed, cereals_data)
# Have a look at the head of the new data frame
colnames(cereals_clusts_hc_mixed)[1] <- "cluster_hc_mixed"
head(cereals_clusts_hc_mixed)
plot(hc_fit_mixed)
rect.hclust(hc_fit_mixed, k = 5, border = "red")
set.seed(144423)
km_basic <- kmeans(cereals_data, centers = 2, nstart = 20)
fviz_cluster(km_basic, cereals_data)
# Initialize wss to 0
wss <- 0
set.seed(2344)
# From 1 upto upto 10 cluster centers, fit the kmeans model
for (i in 1:10) {
cfit <- kmeans(cereals_data, centers = i, nstart = 20)
# Store the sum of within sum of square
wss[i] <- sum(cfit$withinss)
}
plot(1:10, wss, type = "b")
fviz_nbclust(cereals_data, kmeans, method = "wss")
head(cereals_clusts_km)
# Store the cluster assignments in a new data frame
cereals_clusts_km <- as.data.frame(cbind(km_clust$cluster, cereals_data))
rm(list = ls(all=TRUE))
# Use the setwd() function to get to the directory where the data is present
cereals_data <- read.csv('Cereals.csv', header = T)
str(cereals_data)
summary(cereals_data)
#See the head and tail of the dataframe
head(cereals_data)
tail(cereals_data)
#Store all column names in variable called 'attr'
attr <- colnames(cereals_data)
str(attr)
#Store all categorical attributes in 'cat_Attr'
cat_attr <- "shelf"
#Now, how to find the numerical attributes?
num_attr <- setdiff(attr, c(cat_attr, "name"))
num_attr
cereals_data$shelf <- as.factor(as.character(cereals_data$shelf))
#Now see the structure of the dataframe
str(cereals_data)
rownames(cereals_data) <- cereals_data$name
#cereals_data <- cereals_data[, -c(colnames(cereals_data) %in% ("name"))]
# (or)
cereals_data$name <- NULL
sum(is.na(cereals_data))
library(DMwR)
sum(is.na(cereals_data$shelf))
cereals_data[,num_attr] <- knnImputation(cereals_data[,num_attr], k = 3, scale = T)
sum(is.na(cereals_data))
head(cereals_data)
#How do you find missing values per column?
colSums(is.na(cereals_data))
#Make a copy of the dataframe for later use (mixed attributes)
cereals_data_copy <- cereals_data
library(dummies)
shelfDummies <- data.frame(dummy(cereals_data$shelf))
#Name the new attributes appropriately
names(shelfDummies) <- c("Shelf1","Shelf2","Shelf3")
head(shelfDummies)
cereals_data$shelf <- NULL
cereals_data <- data.frame(cbind(cereals_data, shelfDummies))
#check the dataframe using head()
head(cereals_data)
cereals_data[, num_attr] <- scale(cereals_data[,num_attr], center = T, scale = T)
#install.packages("factoextra")
# if(!require(devtools)) install.packages("devtools")
# devtools::install_github("kassambara/factoextra")
library(factoextra)
# Use the get_dist() function from the factoexrtra to calculate inter-observation distances
distance <- get_dist(cereals_data)
# The fviz_dist() function plots a visual representation of the inter-observation distances
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# The gradient argument, helps us define the color range for the distance scale
# We use the euclidean distance measure (all attributes are numerical now)
distM <- dist(cereals_data, method = "euclidean")
hc_fit <- hclust(distM, method = "ward.D2")
#ward.D2 method - find the pair of clusters that leads to minimum increase in total within-cluster variance after merging
plot(hc_fit)
#Plot clusters being surrounded by a border, using the rect.hclust() function
rect.hclust(hc_fit, k = 6, border = "red")
points_hc <- cutree(hc_fit, k = 6)
# Store the clusters in a data frame along with the cereals data
cereals_clusts_hc <- cbind(points_hc, cereals_data)
# Have a look at the head of the new data frame
colnames(cereals_clusts_hc)[1] <- "cluster_hc"
head(cereals_clusts_hc)
#Scaling the numeric attributes
cereals_data_copy[,num_attr] <- scale(cereals_data_copy[,num_attr],scale=T,center=T)
#Calculating gower distance
library(cluster)
gower_dist = daisy(cereals_data_copy,metric = "gower")
head(gower_dist)
class(gower_dist)
#Now that you have the distance matrix, do the hclust()
hc_fit_mixed <- hclust(gower_dist, method = "ward.D2")
help("kmeans")
plot(hc_fit_mixed )
points_hc_mixed <- cutree(hc_fit_mixed , k = 6)
# Store the clusters in a data frame along with the cereals data
cereals_clusts_hc_mixed <- cbind(points_hc_mixed, cereals_data)
# Have a look at the head of the new data frame
colnames(cereals_clusts_hc_mixed)[1] <- "cluster_hc_mixed"
head(cereals_clusts_hc_mixed)
plot(hc_fit_mixed)
rect.hclust(hc_fit_mixed, k = 5, border = "red")
set.seed(144423)
km_basic <- kmeans(cereals_data, centers = 2, nstart = 20)
fviz_cluster(km_basic, cereals_data)
# Initialize wss to 0
wss <- 0
set.seed(2344)
# From 1 upto upto 10 cluster centers, fit the kmeans model
for (i in 1:10) {
cfit <- kmeans(cereals_data, centers = i, nstart = 20)
# Store the sum of within sum of square
wss[i] <- sum(cfit$withinss)
}
plot(1:10, wss, type = "b")
fviz_nbclust(cereals_data, kmeans, method = "wss")
rm(list = ls(all=TRUE))
# Use the setwd() function to get to the directory where the data is present
crime_data <- read.csv('crime_data.csv', header = T)
str(crime_data)
summary(crime_data)
#See the head and tail of the dataframe
head(crime_data)
tail(crime_data)
#Store all column names in variable called 'attr'
attr <- colnames(crime_data)
str(attr)
#Store all categorical attributes in 'cat_Attr'
cat_attr <- "State"
#Now, how to find the numerical attributes?
num_attr <- setdiff(attr, c(cat_attr, "State"))
num_attr
help("setdiff"")
help(settdiff)
help(settdiff)
settdiff
settdiff
settdiff
(x <- c(sort(sample(1:20, 9)), NA))
(y <- c(sort(sample(3:23, 7)), NA))
setdiff(x,y)
(x <- c(sort(sample(1:20, 9)), NA))
(y <- c(sort(sample(3:23, 7)), NA))
setdiff(x,y)
x
