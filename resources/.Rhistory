is.vector(data.frame())
cf=data.frame('name', "age")
cf
cf=data.frame('name'=c1:2, "age" = 1:2)
cf=data.frame('name'=1:2, "age" = 1:2)
cf
sum(1:2)
apply(mtcars, 2, mean)
mtcars
mean
apply(mtcars, 2, mean)
## ------------------------------------------------------------------------
apply(mtcars_imputed[,-c(1)],2,max)
summary(mtcars_imputed)
dim(mtcars_imputed_standardized)
dim(mtcars_imputed)
xlcust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T)
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T)
xlcust_bank_details
install.packages("data.table")
library(data.table)
merged_df = merge(cust_bank_details,cust_demographics,by.x="ID",by.y = "ID")
head(merged_df)
library(data.table)
head(cust_bank_details, n=2)
help("head")
## ------------------------------------------------------------------------
colnames(cust_demographics)[1] = "ID"
head(cust_demographics)
merged_df = merge(cust_bank_details,cust_demographics,by.x="ID",by.y = "ID")
head(merged_df)
## ------------------------------------------------------------------------
library(data.table)
merged_df = merge(cust_bank_details,cust_demographics,by.x="ID",by.y = "ID")
cust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T)
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T)
merged_df = merge(cust_bank_details,cust_demographics,by.x="ID",by.y = "ID")
head(merged_df)
merged_df = merge(cust_bank_details,cust_demographics,by.x="ID",by.y = "ID")
head(merged_df)
## ------------------------------------------------------------------------
colnames(cust_demographics)[1] = "ID"
library(data.table)
merged_df = merge(cust_bank_details,cust_demographics,by.x="ID",by.y = "ID")
head(merged_df)
head(cust_demographics)
dim(cust_demographics)
## ------------------------------------------------------------------------
dim(cust_bank_details)
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T)
colnames(cust_demographics)[1] = "ID"
dim(cust_demographics)
merged_df = merge(cust_bank_details,cust_demographics,by.x="ID",by.y = "ID")
dim(merged_df)
cust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T)
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T)
cust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T)
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T)
colnames(cust_bank_details)
colnames(cust_demographics)
nrow(cust_bank_details)
nrow(cust_demographics)
view(cust_bank_details)
View(cust_bank_details)
View(cust_demographics)
for i in colnames(cust_bank_details)
print typeof(i)
str(cust_bank_details)
library(dummies)
dummy(mtcars_imputed$vs)
install.packages("dummies")
library(dummies)
dummy(mtcars_imputed$vs)
dummy(cust_bank_details)
dummy(cust_bank_details$Mortgage)
cust_bank_details$mg = as.factor(cust_bank_details$Mortgage)
# converting am column to factor
View(cust_bank_details)
range(cust_bank_details$Online)
colsum=c()
for (i in colnames(cust_bank_details))
{
sum = 0
for (j in mtcars[,i])
{
if(is.na(j)==TRUE)
{
sum = sum+1
}else
{
sum = sum
}
}
colsum[i] = sum
}
colsum
colsum=c()
for (i in colnames(cust_bank_details))
{
sum = 0
for (j in cust_bank_details[,i])
{
if(is.na(j)==TRUE)
{
sum = sum+1
}else
{
sum = sum
}
}
colsum[i] = sum
}
colsum
colSums(cust_bank_details)
colSums(cust_bank_details)
colSums(is.na(cust_bank_details))
sum(colsum)
#cust_bank_details$mg = as.factor(cust_bank_details$Mortgage)
# converting am column to factor
View(cust_bank_details)
cust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T)
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T)
colnames(cust_bank_details)
colnames(cust_demographics)
nrow(cust_bank_details)
nrow(cust_demographics)
View(cust_bank_details)
View(cust_demographics)
str(cust_bank_details)
str(cust_demographics)
library(dummies)
dummy(cust_bank_details$Mortgage)
#cust_bank_details$mg = as.factor(cust_bank_details$Mortgage)
# converting am column to factor
View(cust_bank_details)
colsum=c()
for (i in colnames(cust_bank_details))
{
sum = 0
for (j in cust_bank_details[,i])
{
if(is.na(j)==TRUE)
{
sum = sum+1
}else
{
sum = sum
}
}
colsum[i] = sum
}
colsum
colSums(is.na(cust_bank_details))
sum(colsum)
sum1=0
for (i in colnames(cust_bank_details))
{
for (j in cust_bank_details[,i])
{
if(is.na(j)==TRUE)
{
sum1 = sum1+1
}
}
sum
sum1
sum1
colsum=c()
for (i in colnames(cust_bank_details))
{
sum = 0
for (j in cust_bank_details[,i])
{
if(is.na(j)==TRUE)
{
sum = sum+1
}else
{
sum = sum
}
}
colsum[i] = sum
}
colsum
colsum
colsum
colSums(is.na(cust_bank_details))
}
for (i in colnames(cust_bank_details))
{
sum = 0
for (j in cust_bank_details[,i])
{
if(is.na(j)==TRUE)
{
sum = sum+1
}else
{
sum = sum
}
}
colsum[i] = sum
}
colsum
s=0
for (i in (cust_bank_details))
{
if(is.na(i)==TRUE)
{
sum = sum+1
}
}
s
for (i in (cust_bank_details))
{
print(i)
}
print(cust_bank_details[1])
print(head(cust_bank_details[1]))
s=0
for (i in (cust_bank_details))
{
for (j in (i))
if(is.na(j)==TRUE)
{
sum = sum+1
}
}
s
for (i in (cust_bank_details))
{
for (j in (i))
if(is.na(j)==TRUE)
{
print ("ha")
sum = sum+1
}
}
s
s=0
for (i in (cust_bank_details))
{
for (j in (i))
if(is.na(j)==TRUE)
{
print ("ha")
s = s+1
}
}
s
s=0
for (i in (cust_bank_details))
{
for (j in (i))
if(is.na(j)==TRUE)
{
s = s+1
}
}
s
str(cust_bank_details)
View(cust_demographics)
labelExp(10)
labelExp <- function(x) #Default Values for y Arguments
{
if(x > 5)
result= 'Experenced'
result = 'Fresher'
}
labelExp(10)
labelExp <- function(x)
{
if(x > 5)
result= 'Experenced'
result = 'Fresher'
}
labelExp <- function(x)
{
if(x > 5)
result= 'Experenced'
result = 'Fresher'
}
labelExp(10)
print(labelExp(10))
labelExp <- function(x)
{
if(x > 10)
result= 'Experenced'
else
result = 'Fresher'
}
labelExp <- function(x)
{
if(x > 10)
result= 'Experenced'
else
result = 'Fresher'
}
print(labelExp(10))
print(labelExp(3))
labelExp <- function(x)
{
if(x > 5)
result= 'Experienced'
else
result = 'Fresher'
}
print(labelExp(3))
print(labelExp(6))
lapply(cust_demographics$Experience, labelExp)
lapply(cust_demographics$Experience, function(labelExp))
lapply(cust_demographics$Experience, function(x) {if (x> 5) 'E' else 'F'})
library(DMwR)
cleanDemogr  = centralImputation(cust_demographics)
lapply(cleanDemogr$Experience, function(x) {if (x> 5) 'E' else 'F'})
View(cleanDemogr)
View(cleanDemogr)
cleanDemogr$exp = ifelse((cleanDemogr$Experience > 5), 'Experience', "Fresher")
print(ifelse(3> 5, 'yes', 'no'))
cleanDemogr$exp = ifelse((cleanDemogr$Experience > 5), 'Experience', "Fresher")
str(cleanDemogr)
cleanDemogr$exp = ifelse((as.numeric(cleanDemogr$Experience) > 5), 'Experience', "Fresher")
str(cleanDemogr)
head(cleanDemogr)
table(cleanDemogr$exp)
cleanDemogr  = centralImputation(cust_demographics)
str(cleanDemogr)
cleanDemogr$exp = ifelse((as.numeric(as.character(cleanDemogr$Experience)) > 5), 'Experience', "Fresher")
cleanDemogr  = centralImputation(cust_demographics)
str(cleanDemogr)
(as.numeric(as.character(cleanDemogr$Experience))
cleanDemogr$exp = ifelse((as.numeric(as.character(cleanDemogr$Experience))) > 5), 'Experience', "Fresher")
cleanDemogr$exp = ifelse(as.numeric(as.character(cleanDemogr$Experience)) > 5), 'Experience', "Fresher")
cleanDemogr$Experience
str(cleanDemogr$Experience)
cust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T,na.strings = c('?', 'NA'))
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T, na.strings = c('?', 'NA'))
colnames(cust_bank_details)
colnames(cust_demographics)
nrow(cust_bank_details)
nrow(cust_demographics)
View(cust_bank_details)
View(cust_demographics)
str(cust_bank_details)
str(cust_demographics)
library(dummies)
dummy(cust_bank_details$Mortgage)
cust_bank_details$mg = as.factor(cust_bank_details$Mortgage)
# converting am column to factor
View(cust_bank_details)
library(DMwR)
cleanDemogr  = centralImputation(cust_demographics)
str(cleanDemogr)
str(cleanDemogr$Experience)
cleanDemogr$exp = ifelse(cleanDemogr$Experience)) > 5), 'Experience', "Fresher")
cleanDemogr$exp = ifelse(cleanDemogr$Experience) > 5, 'Experience', "Fresher")
cleanDemogr$exp = ifelse(cleanDemogr$Experience > 5, 'Experience', "Fresher")
table(cleanDemogr$exp)
View(cleanDemogr)
colSums(is.na(cust_bank_details))
lapply(cleanDemogr$Experience, function(x) {if (x> 5) 'E' else 'F'})
lapply(cleanDemogr$Experience, function(x) {if (x> 5) 'Experienced' else 'Fresher'})
View(cleanDemogr)
lapply(cleanDemogr$Experience, function(x) {if (x> 7) 'Experienced' else 'Fresher'})
View(cleanDemogr)
cleanDemogr$exp = ifelse(cleanDemogr$Experience > 5, 'Experience', "Fresher")
cleanDemogr$exp=NULL
lapply(cleanDemogr$Experience, function(x) {if (x> 7) 'Experienced' else 'Fresher'})
View(cleanDemogr)
lapply(cleanDemogr$Experience, function(x) {if (x> 7) 'Experienced' else 'Fresher'})
sapply(cleanDemogr$Experience, function(x) {if (x> 7) 'Experienced' else 'Fresher'})
cleanDemogr$exp= sapply(cleanDemogr$Experience, function(x) {if (x> 7) 'Experienced' else 'Fresher'})
View(cleanDemogr)
View(cleanDemogr)
cust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T,na.strings = c('?', 'NA', '-1'))
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T, na.strings = c('?', 'NA', '-1'))
View(cleanDemogr)
summary(cust_demographics)
summary(cleanDemogr$Experience)
cust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T,na.strings = c('?', 'NA', '-1'))
cust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T,na.strings = c('?', 'NA', '-1'))
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T, na.strings = c('?', 'NA', '-1'))
colnames(cust_bank_details)
colnames(cust_demographics)
nrow(cust_bank_details)
nrow(cust_demographics)
View(cust_bank_details)
View(cust_demographics)
str(cust_bank_details)
str(cust_demographics)
library(dummies)
dummy(cust_bank_details$Mortgage)
cust_bank_details$mg = as.factor(cust_bank_details$Mortgage)
# converting am column to factor
View(cust_bank_details)
colsum=c()
for (i in colnames(cust_bank_details))
{
sum = 0
for (j in cust_bank_details[,i])
{
if(is.na(j)==TRUE)
{
sum = sum+1
}else
{
sum = sum
}
}
colsum[i] = sum
}
colsum
colSums(is.na(cust_bank_details))
print(head(cust_bank_details[1]))
#Count of NAs using global scalar
naCount=0
for (i in (cust_bank_details))
{
for (j in (i))
if(is.na(j)==TRUE)
{
naCount = naCount+1
}
}
naCount
library(DMwR)
cleanDemogr  = centralImputation(cust_demographics)
str(cleanDemogr)
str(cleanDemogr$Experience)
cleanDemogr$exp = ifelse(cleanDemogr$Experience > 5, 'Experience', "Fresher")
cleanDemogr$exp=NULL
table(cleanDemogr$exp)
labelExp <- function(x)
{
if(x > 5)
result= 'Experienced'
else
result = 'Fresher'
}
summary(cleanDemogr$Experience)
View(cleanDemogr)
cleanDemogr$exp= sapply(cleanDemogr$Experience, function(x) {if (x> 7) 'Experienced' else 'Fresher'})
View(cleanDemogr)
cust_bank_details = read.table("Customer_Bank Details_MV.csv",sep = ",",header = T,na.strings = c('?', 'NA', '-1', '-6'))
cust_demographics = read.table("Customer_Demographics_MV_DOB.csv",sep = ",",header = T, na.strings = c('?', 'NA', '-1','-6'))
colnames(cust_bank_details)
colnames(cust_demographics)
nrow(cust_bank_details)
nrow(cust_demographics)
View(cust_bank_details)
View(cust_demographics)
str(cust_bank_details)
str(cust_demographics)
library(dummies)
dummy(cust_bank_details$Mortgage)
cust_bank_details$mg = as.factor(cust_bank_details$Mortgage)
# converting am column to factor
View(cust_bank_details)
colsum=c()
for (i in colnames(cust_bank_details))
{
sum = 0
for (j in cust_bank_details[,i])
{
if(is.na(j)==TRUE)
{
sum = sum+1
}else
{
sum = sum
}
}
colsum[i] = sum
}
colsum
colSums(is.na(cust_bank_details))
print(head(cust_bank_details[1]))
#Count of NAs using global scalar
naCount=0
for (i in (cust_bank_details))
{
for (j in (i))
if(is.na(j)==TRUE)
{
naCount = naCount+1
}
}
naCount
library(DMwR)
cleanDemogr  = centralImputation(cust_demographics)
str(cleanDemogr)
str(cleanDemogr$Experience)
cleanDemogr$exp = ifelse(cleanDemogr$Experience > 5, 'Experience', "Fresher")
cleanDemogr$exp=NULL
table(cleanDemogr$exp)
labelExp <- function(x)
{
if(x > 5)
result= 'Experienced'
else
result = 'Fresher'
}
summary(cleanDemogr$Experience)
View(cleanDemogr)
cleanDemogr$exp= sapply(cleanDemogr$Experience, function(x) {if (x> 7) 'Experienced' else 'Fresher'})
View(cleanDemogr)
apply(cleanDemogr[,-c(1)],2,mean)
lapply(cleanDemogr$Experience,2,mean)
lapply(cleanDemogr$Experience,mean)
sapply(cleanDemogr$Experience,mean)
View(cleanDemogr)
apply(cleanDemogr[,-c(1)],2,mean)
