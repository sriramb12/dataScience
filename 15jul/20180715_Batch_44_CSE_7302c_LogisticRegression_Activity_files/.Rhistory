rm(list = ls(all=TRUE))
bank_data <- read.table("bank.txt", header=T, sep=";")
rm(list = ls(all=TRUE))
bank_data <- read.table("bank.txt", header=T, sep=";")
str(bank_data)
summary(bank_data)
rm(list = ls(all=TRUE))
bank_data <- read.table("bank.txt", header=T, sep=";")
str(bank_data)
summary(bank_data)
head(bank_data)
tail(bank_data)
sum(is.na(bank_data))
library(caret)
set.seed(786)
# The argument "y" to the createDataPartition() function is the response variable
# The argument "p" is the percentage of data that goes to training
# The argument "list" should be input a boolean (T or F). Remember to put list = F, else the output is going to  be a list and your data can't be subsetted with it
train_rows <- createDataPartition(bank_data$y, p = 0.7, list = F)
train_data <- bank_data[train_rows, ]
test_data <- bank_data[-train_rows, ]
rm(list = ls(all=TRUE))
bank_data <- read.table("bank.txt", header=T, sep=";")
str(bank_data)
summary(bank_data)
head(bank_data)
tail(bank_data)
sum(is.na(bank_data))
library(caret)
set.seed(786)
# The argument "y" to the createDataPartition() function is the response variable
# The argument "p" is the percentage of data that goes to training
# The argument "list" should be input a boolean (T or F). Remember to put list = F, else the output is going to  be a list and your data can't be subsetted with it
train_rows <- createDataPartition(bank_data$y, p = 0.7, list = F)
train_data <- bank_data[train_rows, ]
test_data <- bank_data[-train_rows, ]
str(train_data)
log_reg <- glm(y~., data = train_data, family = binomial)
summary(Devaince_residuals)
rm(list = ls(all=TRUE))
bank_data <- read.table("bank.txt", header=T, sep=";")
str(bank_data)
summary(bank_data)
head(bank_data)
tail(bank_data)
sum(is.na(bank_data))
library(caret)
set.seed(786)
# The argument "y" to the createDataPartition() function is the response variable
# The argument "p" is the percentage of data that goes to training
# The argument "list" should be input a boolean (T or F). Remember to put list = F, else the output is going to  be a list and your data can't be subsetted with it
train_rows <- createDataPartition(bank_data$y, p = 0.7, list = F)
train_data <- bank_data[train_rows, ]
test_data <- bank_data[-train_rows, ]
str(train_data)
log_reg <- glm(y~., data = train_data, family = binomial)
summary(log_reg)
rm(list = ls(all=TRUE))
bank_data <- read.table("bank.txt", header=T, sep=";")
str(bank_data)
summary(bank_data)
head(bank_data)
tail(bank_data)
sum(is.na(bank_data))
library(caret)
set.seed(786)
# The argument "y" to the createDataPartition() function is the response variable
# The argument "p" is the percentage of data that goes to training
# The argument "list" should be input a boolean (T or F). Remember to put list = F, else the output is going to  be a list and your data can't be subsetted with it
train_rows <- createDataPartition(bank_data$y, p = 0.7, list = F)
train_data <- bank_data[train_rows, ]
test_data <- bank_data[-train_rows, ]
str(train_data)
log_reg <- glm(y~., data = train_data, family = binomial)
View(log_reg)
rm(list = ls(all=TRUE))
bank_data <- read.table("bank.txt", header=T, sep=";")
str(bank_data)
summary(bank_data)
head(bank_data)
tail(bank_data)
sum(is.na(bank_data))
library(caret)
set.seed(786)
# The argument "y" to the createDataPartition() function is the response variable
# The argument "p" is the percentage of data that goes to training
# The argument "list" should be input a boolean (T or F). Remember to put list = F, else the output is going to  be a list and your data can't be subsetted with it
train_rows <- createDataPartition(bank_data$y, p = 0.7, list = F)
train_data <- bank_data[train_rows, ]
test_data <- bank_data[-train_rows, ]
str(train_data)
log_reg <- glm(y~., data = train_data, family = binomial)
summary(log_reg)
Devaince_residuals = residuals(log_reg, "deviance")
summary(Devaince_residuals)
logLik(log_reg)
rm(list = ls(all=TRUE))
bank_data <- read.table("bank.txt", header=T, sep=";")
str(bank_data)
summary(bank_data)
head(bank_data)
tail(bank_data)
sum(is.na(bank_data))
library(caret)
set.seed(786)
# The argument "y" to the createDataPartition() function is the response variable
# The argument "p" is the percentage of data that goes to training
# The argument "list" should be input a boolean (T or F). Remember to put list = F, else the output is going to  be a list and your data can't be subsetted with it
train_rows <- createDataPartition(bank_data$y, p = 0.7, list = F)
train_data <- bank_data[train_rows, ]
test_data <- bank_data[-train_rows, ]
str(train_data)
log_reg <- glm(y~., data = train_data, family = binomial)
summary(log_reg)
Devaince_residuals = residuals(log_reg, "deviance")
summary(Devaince_residuals)
logLik(log_reg)
# Use the argument 'type = "response"' in the predict function to get a list of predictions between 0 and 1
# By default if no dataset is mentioned, training data is used
prob_train <- predict(log_reg, type = "response")
#prob_train <- predict(log_reg)
library(ROCR)
# The prediction object takes the probability scores and the original levels for theses data as input
pred <- prediction(prob_train, train_data$y)
# The prediction object contains a list of predictions (probability scores), original class labels, cutoffs, false positives, true positives, true negatives, false negatives, No. of positive predictions and No. of negative predictions corresponding to these cutoffs. Class distribution in the dataset.
